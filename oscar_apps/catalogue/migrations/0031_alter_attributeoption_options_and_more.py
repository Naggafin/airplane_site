# Generated by Django 5.1.3 on 2025-01-05 22:54

import auto_prefetch
import django.db.models.deletion
import django.db.models.manager
from django.db import migrations


class Migration(migrations.Migration):
	dependencies = [
		("catalogue", "0030_product_tags"),
		("contenttypes", "0002_remove_content_type_name"),
	]

	operations = [
		migrations.AlterModelOptions(
			name="attributeoption",
			options={
				"base_manager_name": "prefetch_manager",
				"verbose_name": "Attribute option",
				"verbose_name_plural": "Attribute options",
			},
		),
		migrations.AlterModelOptions(
			name="attributeoptiongroup",
			options={
				"base_manager_name": "prefetch_manager",
				"verbose_name": "Attribute option group",
				"verbose_name_plural": "Attribute option groups",
			},
		),
		migrations.AlterModelOptions(
			name="category",
			options={
				"base_manager_name": "prefetch_manager",
				"ordering": ["path"],
				"verbose_name": "Category",
				"verbose_name_plural": "Categories",
			},
		),
		migrations.AlterModelOptions(
			name="option",
			options={
				"base_manager_name": "prefetch_manager",
				"ordering": ["order", "name"],
				"verbose_name": "Option",
				"verbose_name_plural": "Options",
			},
		),
		migrations.AlterModelOptions(
			name="product",
			options={
				"base_manager_name": "prefetch_manager",
				"ordering": ["-date_created"],
				"verbose_name": "Product",
				"verbose_name_plural": "Products",
			},
		),
		migrations.AlterModelOptions(
			name="productattribute",
			options={
				"base_manager_name": "prefetch_manager",
				"ordering": ["code"],
				"verbose_name": "Product attribute",
				"verbose_name_plural": "Product attributes",
			},
		),
		migrations.AlterModelOptions(
			name="productattributevalue",
			options={
				"base_manager_name": "prefetch_manager",
				"verbose_name": "Product attribute value",
				"verbose_name_plural": "Product attribute values",
			},
		),
		migrations.AlterModelOptions(
			name="productcategory",
			options={
				"base_manager_name": "prefetch_manager",
				"ordering": ["product", "category"],
				"verbose_name": "Product category",
				"verbose_name_plural": "Product categories",
			},
		),
		migrations.AlterModelOptions(
			name="productclass",
			options={
				"base_manager_name": "prefetch_manager",
				"ordering": ["name"],
				"verbose_name": "Product class",
				"verbose_name_plural": "Product classes",
			},
		),
		migrations.AlterModelOptions(
			name="productimage",
			options={
				"base_manager_name": "prefetch_manager",
				"ordering": ["display_order"],
				"verbose_name": "Product image",
				"verbose_name_plural": "Product images",
			},
		),
		migrations.AlterModelOptions(
			name="productrecommendation",
			options={
				"base_manager_name": "prefetch_manager",
				"ordering": ["primary", "-ranking"],
				"verbose_name": "Product recommendation",
				"verbose_name_plural": "Product recomendations",
			},
		),
		migrations.AlterModelManagers(
			name="attributeoption",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterModelManagers(
			name="attributeoptiongroup",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterModelManagers(
			name="category",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterModelManagers(
			name="option",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterModelManagers(
			name="product",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterModelManagers(
			name="productattribute",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterModelManagers(
			name="productattributevalue",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterModelManagers(
			name="productcategory",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterModelManagers(
			name="productclass",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterModelManagers(
			name="productimage",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterModelManagers(
			name="productrecommendation",
			managers=[
				("objects", django.db.models.manager.Manager()),
				("prefetch_manager", django.db.models.manager.Manager()),
			],
		),
		migrations.AlterField(
			model_name="attributeoption",
			name="group",
			field=auto_prefetch.ForeignKey(
				on_delete=django.db.models.deletion.CASCADE,
				related_name="options",
				to="catalogue.attributeoptiongroup",
				verbose_name="Group",
			),
		),
		migrations.AlterField(
			model_name="option",
			name="option_group",
			field=auto_prefetch.ForeignKey(
				blank=True,
				help_text='Select an option group if using type "Option" or "Multi Option"',
				null=True,
				on_delete=django.db.models.deletion.CASCADE,
				related_name="product_options",
				to="catalogue.attributeoptiongroup",
				verbose_name="Option Group",
			),
		),
		migrations.AlterField(
			model_name="product",
			name="parent",
			field=auto_prefetch.ForeignKey(
				blank=True,
				help_text="Only choose a parent product if you're creating a child product.  For example if this is a size 4 of a particular t-shirt.  Leave blank if this is a stand-alone product (i.e. there is only one version of this product).",
				null=True,
				on_delete=django.db.models.deletion.CASCADE,
				related_name="children",
				to="catalogue.product",
				verbose_name="Parent product",
			),
		),
		migrations.AlterField(
			model_name="product",
			name="product_class",
			field=auto_prefetch.ForeignKey(
				blank=True,
				help_text="Choose what type of product this is",
				null=True,
				on_delete=django.db.models.deletion.PROTECT,
				related_name="products",
				to="catalogue.productclass",
				verbose_name="Product type",
			),
		),
		migrations.AlterField(
			model_name="productattribute",
			name="option_group",
			field=auto_prefetch.ForeignKey(
				blank=True,
				help_text='Select an option group if using type "Option" or "Multi Option"',
				null=True,
				on_delete=django.db.models.deletion.CASCADE,
				related_name="product_attributes",
				to="catalogue.attributeoptiongroup",
				verbose_name="Option Group",
			),
		),
		migrations.AlterField(
			model_name="productattribute",
			name="product_class",
			field=auto_prefetch.ForeignKey(
				blank=True,
				null=True,
				on_delete=django.db.models.deletion.CASCADE,
				related_name="attributes",
				to="catalogue.productclass",
				verbose_name="Product type",
			),
		),
		migrations.AlterField(
			model_name="productattributevalue",
			name="attribute",
			field=auto_prefetch.ForeignKey(
				on_delete=django.db.models.deletion.CASCADE,
				to="catalogue.productattribute",
				verbose_name="Attribute",
			),
		),
		migrations.AlterField(
			model_name="productattributevalue",
			name="entity_content_type",
			field=auto_prefetch.ForeignKey(
				blank=True,
				editable=False,
				null=True,
				on_delete=django.db.models.deletion.CASCADE,
				to="contenttypes.contenttype",
			),
		),
		migrations.AlterField(
			model_name="productattributevalue",
			name="product",
			field=auto_prefetch.ForeignKey(
				on_delete=django.db.models.deletion.CASCADE,
				related_name="attribute_values",
				to="catalogue.product",
				verbose_name="Product",
			),
		),
		migrations.AlterField(
			model_name="productattributevalue",
			name="value_option",
			field=auto_prefetch.ForeignKey(
				blank=True,
				null=True,
				on_delete=django.db.models.deletion.CASCADE,
				to="catalogue.attributeoption",
				verbose_name="Value option",
			),
		),
		migrations.AlterField(
			model_name="productcategory",
			name="category",
			field=auto_prefetch.ForeignKey(
				on_delete=django.db.models.deletion.CASCADE,
				to="catalogue.category",
				verbose_name="Category",
			),
		),
		migrations.AlterField(
			model_name="productcategory",
			name="product",
			field=auto_prefetch.ForeignKey(
				on_delete=django.db.models.deletion.CASCADE,
				to="catalogue.product",
				verbose_name="Product",
			),
		),
		migrations.AlterField(
			model_name="productimage",
			name="product",
			field=auto_prefetch.ForeignKey(
				on_delete=django.db.models.deletion.CASCADE,
				related_name="images",
				to="catalogue.product",
				verbose_name="Product",
			),
		),
		migrations.AlterField(
			model_name="productrecommendation",
			name="primary",
			field=auto_prefetch.ForeignKey(
				on_delete=django.db.models.deletion.CASCADE,
				related_name="primary_recommendations",
				to="catalogue.product",
				verbose_name="Primary product",
			),
		),
		migrations.AlterField(
			model_name="productrecommendation",
			name="recommendation",
			field=auto_prefetch.ForeignKey(
				on_delete=django.db.models.deletion.CASCADE,
				to="catalogue.product",
				verbose_name="Recommended product",
			),
		),
	]
